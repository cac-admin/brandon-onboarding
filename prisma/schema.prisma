// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}


model User {
    id               String   @id @default(cuid())
    name             String?
    email            String?  @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    character        Pc[]
    role             Role    @default(USER)

}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? 
  access_token             String? 
  expires_at               Int?    
  token_type               String? 
  scope                    String? 
  id_token                 String? 
  session_state            String? 
  refresh_token_expires_in Int?    

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Pc {
    id          Int     @id @default(autoincrement())
    name        String
    class       String

    level       Int     @default(3)

    currentHp   Int    
    maxHp       Int
    
    str         Int
    dex         Int
    con         Int
    int         Int
    wis         Int
    char        Int
    user        User    @relation(fields: [userId], references: [id])
    userId      String     @unique  
}

model Feats {
    id          Int     @id @default(autoincrement())
    Name        String  
    halfFeat    Boolean @default(false)
}

enum Role {
    USER 
    ADMIN
}