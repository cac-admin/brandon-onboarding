// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  characters    Character[]
  role          Role        @default(USER)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Character {
  id    Int    @id @default(autoincrement())
  name  String
  class String

  level Int @default(3)

  currentHp Int
  maxHp     Int

  str  Int
  dex  Int
  con  Int
  int  Int
  wis  Int
  char Int

  // Connecting player characters to users (one-to-one)
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Connecting associated race to player character (many-to-one because multiple character can be a race, but player characters can't be many races)
  Race   Race @relation(fields: [raceId], references: [id])
  raceId Int

  // connecting associated feat to player character (Many-to-many because player characters can have more than one feat)
  feats Feats[]
}

model Race {
  id        Int    @id @default(autoincrement())
  name      String
  abilities String

  spells Spells[]

  statIncr StatIncr[]

  users Character[]
}

model Feats {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  statIncr StatIncr[]

  users Character[]

  spells Spells[]
}

model Spells {
  id     Int    @id @default(autoincrement())
  spells String

  race Race[]

  feats Feats[]
}

model StatIncr {
  id Int @id @default(autoincrement())

  // Each race that increases a stat (one-to-many)
  raceId Int
  race   Race @relation(fields: [raceId], references: [id])

  // Each half-feat that increases a stat (one-to-many)
  featId Int
  feats  Feats @relation(fields: [featId], references: [id])

  // Increasing the associated stat (typically 1)
  stat   Stat
  amount Int  @default(1)
}

enum Stat {
  STR
  DEX
  CON
  INT
  WIS
  CHA
}

enum Role {
  USER
  ADMIN
}
